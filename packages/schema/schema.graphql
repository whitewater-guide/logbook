scalar Date
scalar JSON
scalar Cursor

# This is a stub of User from external service
extend type User @key(fields: "id") {
  id: ID! @external
}
# This is a stub of Section from external service
extend type Section @key(fields: "id") {
  id: ID! @external
}

input Page {
  limit: Int
  after: Cursor
  # This field is not used, it's here for compatibility with core whitewater.guide schema
  offset: Int
}

type PageInfo {
  endCursor: Cursor
  hasMore: Boolean!
}

type LatLng {
  lat: Float!
  lng: Float!
}

input LatLngInput {
  lat: Float!
  lng: Float!
}

type LogbookSection @key(fields: "id") {
  id: ID!

  region: String!
  river: String!
  section: String!
  difficulty: Float!
  putIn: LatLng
  takeOut: LatLng

  upstreamId: ID
  upstreamSection: Section
  upstreamData: JSON

  createdAt: Date
  updatedAt: Date
}

input LogbookSectionInput {
  id: ID

  region: String!
  river: String!
  section: String!
  difficulty: Float!
  putIn: LatLngInput
  takeOut: LatLngInput

  upstreamId: String
  upstreamData: JSON
}

input LogbookSectionsFilter {
  name: String
  difficulty: [Float!]
}

type LogbookSectionEdge {
  node: LogbookSection!
  cursor: Cursor!
}

type LogbookSectionsConnection {
  edges: [LogbookSectionEdge!]!
  pageInfo: PageInfo!
}

type Level {
  unit: String
  value: Float
}

input LevelInput {
  unit: String
  value: Float!
}

type LogbookDescent @key(fields: "id") {
  id: ID!

  userId: ID!
  user: User

  section: LogbookSection!
  startedAt: Date!
  duration: Int
  level: Level
  comment: String
  public: Boolean

  upstreamData: JSON

  createdAt: Date
  updatedAt: Date

  # TODO: boat type as object
}

input LogbookDescentInput {
  id: ID

  section: LogbookSectionInput!
  startedAt: Date!
  duration: Int

  level: LevelInput
  comment: String
  public: Boolean
  upstreamData: JSON
}

type LogbookDescentEdge {
  node: LogbookDescent!
  cursor: Cursor!
}

type LogbookDescentsConnection {
  edges: [LogbookDescentEdge!]!
  pageInfo: PageInfo!
}

input LogbookDescentsFilter {
  startDate: Date
  endDate: Date
  difficulty: [Float!]

  userID: String
  sectionID: String
  sectionName: String
  upstreamSectionID: String
}

type Query {
  logbookDescent(id: ID, shareToken: String): LogbookDescent
  logbookDescentShareToken(id: ID!): String

  logbookDescents(
    filter: LogbookDescentsFilter
    page: Page
  ): LogbookDescentsConnection
  myLogbookDescents(
    filter: LogbookDescentsFilter
    page: Page
  ): LogbookDescentsConnection

  myLogbookSection(id: ID!): LogbookSection
  myLogbookSections(
    filter: LogbookSectionsFilter
    page: Page
  ): LogbookSectionsConnection

  # TODO: get export/import as csv link
}

type Mutation {
  upsertLogbookDescent(
    descent: LogbookDescentInput!
    shareToken: String
  ): LogbookDescent
  deleteLogbookDescent(id: ID!): Boolean

  upsertLogbookSection(section: LogbookSectionInput!): LogbookSection
  deleteLogbookSection(id: ID!): Boolean
}
