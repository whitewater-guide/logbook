// Generated by dts-bundle-generator v4.3.0

import * as yup from 'yup';

export interface Cursor {
  ordId: number;
  value: string;
}
export declare type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: Date;
  JSON: {
    [key: string]: any;
  };
  Cursor: Cursor;
  _FieldSet: any;
};
export declare type User = {
  __typename?: 'User';
  id: Scalars['ID'];
};
export declare type Section = {
  __typename?: 'Section';
  id: Scalars['ID'];
};
export declare type Page = {
  limit?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['Cursor']>;
};
export declare type PageInfo = {
  __typename?: 'PageInfo';
  endCursor?: Maybe<Scalars['Cursor']>;
  hasMore: Scalars['Boolean'];
};
export declare type LatLng = {
  __typename?: 'LatLng';
  lat: Scalars['Float'];
  lng: Scalars['Float'];
};
export declare type LatLngInput = {
  lat: Scalars['Float'];
  lng: Scalars['Float'];
};
export declare type LogbookSection = {
  __typename?: 'LogbookSection';
  id: Scalars['ID'];
  region: Scalars['String'];
  river: Scalars['String'];
  section: Scalars['String'];
  difficulty: Scalars['Float'];
  putIn?: Maybe<LatLng>;
  takeOut?: Maybe<LatLng>;
  upstreamId?: Maybe<Scalars['ID']>;
  upstreamSection?: Maybe<Section>;
  upstreamData?: Maybe<Scalars['JSON']>;
  createdAt?: Maybe<Scalars['Date']>;
  updatedAt?: Maybe<Scalars['Date']>;
};
export declare type LogbookSectionInput = {
  id?: Maybe<Scalars['ID']>;
  region: Scalars['String'];
  river: Scalars['String'];
  section: Scalars['String'];
  difficulty: Scalars['Float'];
  putIn?: Maybe<LatLngInput>;
  takeOut?: Maybe<LatLngInput>;
  upstreamId?: Maybe<Scalars['String']>;
  upstreamData?: Maybe<Scalars['JSON']>;
};
export declare type LogbookSectionsFilter = {
  name?: Maybe<Scalars['String']>;
  difficulty?: Maybe<Array<Scalars['Float']>>;
};
export declare type LogbookSectionEdge = {
  __typename?: 'LogbookSectionEdge';
  node: LogbookSection;
  cursor: Scalars['Cursor'];
};
export declare type LogbookSectionsConnection = {
  __typename?: 'LogbookSectionsConnection';
  edges: Array<LogbookSectionEdge>;
  pageInfo: PageInfo;
};
export declare type Level = {
  __typename?: 'Level';
  unit?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};
export declare type LevelInput = {
  unit?: Maybe<Scalars['String']>;
  value: Scalars['Float'];
};
export declare type LogbookDescent = {
  __typename?: 'LogbookDescent';
  id: Scalars['ID'];
  userId: Scalars['ID'];
  user?: Maybe<User>;
  section: LogbookSection;
  startedAt: Scalars['Date'];
  duration?: Maybe<Scalars['Int']>;
  level?: Maybe<Level>;
  comment?: Maybe<Scalars['String']>;
  public?: Maybe<Scalars['Boolean']>;
  upstreamData?: Maybe<Scalars['JSON']>;
  createdAt?: Maybe<Scalars['Date']>;
  updatedAt?: Maybe<Scalars['Date']>;
};
export declare type LogbookDescentInput = {
  id?: Maybe<Scalars['ID']>;
  section: LogbookSectionInput;
  startedAt: Scalars['Date'];
  duration?: Maybe<Scalars['Int']>;
  level?: Maybe<LevelInput>;
  comment?: Maybe<Scalars['String']>;
  public?: Maybe<Scalars['Boolean']>;
  upstreamData?: Maybe<Scalars['JSON']>;
};
export declare type LogbookDescentEdge = {
  __typename?: 'LogbookDescentEdge';
  node: LogbookDescent;
  cursor: Scalars['Cursor'];
};
export declare type LogbookDescentsConnection = {
  __typename?: 'LogbookDescentsConnection';
  edges: Array<LogbookDescentEdge>;
  pageInfo: PageInfo;
};
export declare type LogbookDescentsFilter = {
  startDate?: Maybe<Scalars['Date']>;
  endDate?: Maybe<Scalars['Date']>;
  difficulty?: Maybe<Array<Scalars['Float']>>;
  userID?: Maybe<Scalars['String']>;
  sectionID?: Maybe<Scalars['String']>;
  sectionName?: Maybe<Scalars['String']>;
  upstreamSectionID?: Maybe<Scalars['String']>;
};
export declare type Query = {
  __typename?: 'Query';
  logbookDescent?: Maybe<LogbookDescent>;
  logbookDescentShareToken?: Maybe<Scalars['String']>;
  logbookDescents?: Maybe<LogbookDescentsConnection>;
  myLogbookDescents?: Maybe<LogbookDescentsConnection>;
  myLogbookSection?: Maybe<LogbookSection>;
  myLogbookSections?: Maybe<LogbookSectionsConnection>;
};
export declare type QueryLogbookDescentArgs = {
  id?: Maybe<Scalars['ID']>;
  shareToken?: Maybe<Scalars['String']>;
};
export declare type QueryLogbookDescentShareTokenArgs = {
  id: Scalars['ID'];
};
export declare type QueryLogbookDescentsArgs = {
  filter?: Maybe<LogbookDescentsFilter>;
  page?: Maybe<Page>;
};
export declare type QueryMyLogbookDescentsArgs = {
  filter?: Maybe<LogbookDescentsFilter>;
  page?: Maybe<Page>;
};
export declare type QueryMyLogbookSectionArgs = {
  id: Scalars['ID'];
};
export declare type QueryMyLogbookSectionsArgs = {
  filter?: Maybe<LogbookSectionsFilter>;
  page?: Maybe<Page>;
};
export declare type Mutation = {
  __typename?: 'Mutation';
  upsertLogbookDescent?: Maybe<LogbookDescent>;
  deleteLogbookDescent?: Maybe<Scalars['Boolean']>;
  upsertLogbookSection?: Maybe<LogbookSection>;
  deleteLogbookSection?: Maybe<Scalars['Boolean']>;
};
export declare type MutationUpsertLogbookDescentArgs = {
  descent: LogbookDescentInput;
  shareToken?: Maybe<Scalars['String']>;
};
export declare type MutationDeleteLogbookDescentArgs = {
  id: Scalars['ID'];
};
export declare type MutationUpsertLogbookSectionArgs = {
  section: LogbookSectionInput;
};
export declare type MutationDeleteLogbookSectionArgs = {
  id: Scalars['ID'];
};
export declare type LogbookSectionAllFragment = {
  __typename?: 'LogbookSection';
  id: string;
  region: string;
  river: string;
  section: string;
  difficulty: number;
  upstreamId?: Types.Maybe<string>;
  upstreamData?: Types.Maybe<any>;
  createdAt?: Types.Maybe<any>;
  updatedAt?: Types.Maybe<any>;
  putIn?: Types.Maybe<{
    __typename?: 'LatLng';
    lat: number;
    lng: number;
  }>;
  takeOut?: Types.Maybe<{
    __typename?: 'LatLng';
    lat: number;
    lng: number;
  }>;
};
export declare const LogbookSectionAll: import('graphql').DocumentNode;
export declare type LogbookDescentAllButSectionFragment = {
  __typename?: 'LogbookDescent';
  id: string;
  userId: string;
  startedAt: any;
  duration?: Types.Maybe<number>;
  comment?: Types.Maybe<string>;
  public?: Types.Maybe<boolean>;
  upstreamData?: Types.Maybe<any>;
  createdAt?: Types.Maybe<any>;
  updatedAt?: Types.Maybe<any>;
  level?: Types.Maybe<{
    __typename?: 'Level';
    value?: Types.Maybe<number>;
    unit?: Types.Maybe<string>;
  }>;
};
export declare type LogbookDescentAllFragment = {
  __typename?: 'LogbookDescent';
  section: {
    __typename?: 'LogbookSection';
  } & LogbookSectionAllFragment;
} & LogbookDescentAllButSectionFragment;
export declare const LogbookDescentAllButSection: import('graphql').DocumentNode;
export declare const LogbookDescentAll: import('graphql').DocumentNode;
export declare const LevelInputSchema: yup.ObjectSchema<LevelInput>;
export declare const LogbookDescentInputSchema: yup.ObjectSchema<LogbookDescentInput>;
export declare const LatLngInputSchema: yup.ObjectSchema<LatLngInput>;
export declare const LogbookSectionInputSchema: yup.ObjectSchema<LogbookSectionInput>;

export {};
