scalar Date
scalar JSON
scalar Cursor

input Page {
  limit: Int
  after: Cursor
}

type PageInfo {
  endCursor: Cursor
  hasMore: Boolean!
}

type LatLng {
  lat: Float!
  lng: Float!
}

input LatLngInput {
  lat: Float!
  lng: Float!
}

type Section {
  id: ID!

  region: String!
  river: String!
  section: String!
  difficulty: Float!
  putIn: LatLng
  takeOut: LatLng

  upstreamId: String
  upstreamData: JSON

  createdAt: Date
  updatedAt: Date

  # TODO: maybe it's good idea to still have put-in and take-out here
}

input SectionInput {
  id: ID

  region: String!
  river: String!
  section: String!
  difficulty: Float!
  putIn: LatLngInput
  takeOut: LatLngInput

  upstreamId: String
  upstreamData: JSON
}

input SectionsFilter {
  name: String
  difficulty: [Float!]
}

type SectionEdge {
  node: Section!
  cursor: Cursor!
}

type SectionsConnection {
  edges: [SectionEdge!]!
  pageInfo: PageInfo!
}

type Level {
  unit: String
  value: Float
}

input LevelInput {
  note: String
  unit: String
  value: Float
}

type Descent {
  id: ID!
  userId: ID!

  section: Section!
  startedAt: Date!
  duration: Int
  level: Level
  comment: String
  public: Boolean

  upstreamData: JSON

  createdAt: Date
  updatedAt: Date

  # TODO: boat type as object
}

input DescentInput {
  id: ID

  section: SectionInput!
  startedAt: Date!

  level: LevelInput
  comment: String
  public: Boolean
  upstreamData: JSON
}

type DescentEdge {
  node: Descent!
  cursor: Cursor!
}

type DescentsConnection {
  edges: [DescentEdge!]!
  pageInfo: PageInfo!
}

input DescentsFilter {
  startDate: Date
  endDate: Date
  difficulty: [Float!]

  userID: String
  sectionID: String
  sectionName: String
  upstreamSectionID: String
}

type Query {
  descent(id: ID, shareToken: String): Descent

  descents(filter: DescentsFilter, page: Page): DescentsConnection
  myDescents(filter: DescentsFilter, page: Page): DescentsConnection

  mySection(id: ID!): Section
  mySections(filter: SectionsFilter, page: Page): SectionsConnection

  # TODO: get export as csv link
}

type Mutation {
  upsertDescent(descent: DescentInput!, shareToken: String): Descent
  deleteDescent(id: ID!): Boolean

  upsertSection(section: SectionInput!): Section
  deleteSection(id: ID!): Boolean
}
