name: Release
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
env:
  GITHUB_USER: ww-github
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:11-3.0
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        volumes:
          - ${{ github.workspace }}/packages/server/sql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
          - ${{ github.workspace }}/packages/server/sql/seeds.sql:/docker-entrypoint-initdb.d/seeds.sql

    steps:
      - name: Check out
        uses: actions/checkout@v1

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules
        uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Release
        env:
          GITHUB_EVENT: ${{ github.event_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          CORS_WHITELIST: localhost
          JWT_SECRET: __jwt__secret__
        run: yarn release
